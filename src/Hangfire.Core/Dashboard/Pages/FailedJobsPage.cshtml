@* Generator: Template TypeVisibility: Internal GeneratePrettyNames: True *@
@using System
@using Hangfire.Dashboard
@using Hangfire.Dashboard.Pages
@using Hangfire.States
@inherits RazorPage
@{
    Layout = new LayoutPage("Failed Jobs");

    int from, perPage;
    string filterString = Query("filterString");
    string filterMethodString = Query("filterMethodString");
    string startDate = Query("startDate");
    string endDate = Query("endDate");
    string startTime = Query("startTime");
    string endTime = Query("endTime");

    int.TryParse(Query("from"), out from);
    int.TryParse(Query("count"), out perPage);

    var monitor = Storage.GetMonitoringApi();

    var countParameters = new Dictionary<string, string>()
    {
        { "stateName", FailedState.StateName },
        { "filterString", filterString },
        { "filterMethodString", filterMethodString },
        { "startDate", startDate },
        { "endDate", endDate },
        { "startTime", startTime },
        { "endTime", endTime }
    };

    var jobCount = monitor.JobCountByStateName(countParameters);
    var pager = new Pager(from, perPage, jobCount)
    {
        JobsFilterText = filterString,
        JobsFilterMethodText = filterMethodString,
        JobsFilterStartDate = startDate,
        JobsFilterEndDate = endDate,
        JobsFilterStartTime = startTime,
        JobsFilterEndTime = endTime
    };

    var failedJobs = monitor.FailedJobs(pager);
}

<div class="row">
    <div class="col-md-3">
        @Html.JobsSidebar()
    </div>
    <div class="col-md-9">
        <h1 class="page-header">Failed Jobs</h1>

        @if (pager.TotalPageCount == 0)
        {
            <div class="alert alert-success">
                You have no failed jobs at the moment.
            </div>
        }
        else
        {
            <div class="alert alert-warning">
                <strong>Failed jobs do not become expired</strong> to allow you to re-queue them without any
                time pressure. You should re-queue or delete them manually, or apply <code>AutomaticRetry(OnAttemptsExceeded = AttemptsExceededAction.Delete)</code>
                attribute to delete them automatically.
            </div>
            <div class="js-jobs-list">
                <div class="btn-toolbar btn-toolbar-top">
                    <button class="js-jobs-list-command btn btn-sm btn-primary"
                            data-url="@Url.To("/jobs/failed/requeue")"
                            data-loading-text="Enqueueing..."
                            disabled="disabled">
                        <span class="glyphicon glyphicon-repeat"></span>
                        Requeue jobs
                    </button>
                    <button class="js-jobs-list-command btn btn-sm btn-default"
                            data-url="@Url.To("/jobs/failed/delete")"
                            data-loading-text="Deleting..."
                            data-confirm="Do you really want to DELETE ALL selected jobs?">
                        <span class="glyphicon glyphicon-remove"></span>
                        Delete selected
                    </button>
                    @if (EnableSearch == true)
                    { <button data-toggle="collapse" data-target="#advanced-search-bar" class="btn btn-sm btn-success">Advanced Search</button> }
                </div>
                @if (EnableSearch == true)
                {
                    <div id="advanced-search-bar" class="collapse well">
                        <h4 class="advanced-search-header">
                            Advanced Search
                        </h4>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <input type="text" value="" id="filterValueString" class="form-control" placeholder="Search..." />
                                </div>
                                <div class="form-group">
                                    @{
                                        var currentDateTime = DateTime.Now.ToString("dd/MM/yyyy HH:mm");
                                    }
                                    <input id="filterOnDateTime" name="filterOnDateTime" type="checkbox" class="js-jobs-filterOnDateTime-checked" />
                                    <label for="filterOnDateTime">Filter on date time</label>

                                    <div id="datetime-filters" class="row">
                                        <div class="col-xs-6">
                                            <input type="text" value="@currentDateTime" class="datetimeselector-start form-control" id="startDateTime" />
                                        </div>
                                        <div class="col-xs-6">
                                            <input type="text" value="@currentDateTime" class="datetimeselector-end form-control" id="endDateTime" />
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <input id="filterOnMethodName" name="filterOnMethodName" type="checkbox" class="js-jobs-filterOnMethodName-checked" />
                                    <label for="filterOnMethodName">Filter on method name</label>
                                    <input type="text" value="" id="filterMethodString" class="form-control" placeholder="Method name..." />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <button class="js-jobs-filter-command btn btn-sm btn-success"
                                        data-url="@Url.To("/jobs/failed")">
                                    <span class="glyphicon glyphicon-repeat"></span>

                                    Filter jobs
                                </button>
                            </div>
                        </div>
                    </div>
                }
                @Html.PerPageSelector(pager)
                <table class="table">
                    <thead>
                        <tr>
                            <th class="min-width">
                                <input type="checkbox" class="js-jobs-list-select-all" />
                            </th>
                            <th class="min-width">Id</th>
                            <th>Failed</th>
                            <th>Job</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{ var index = 0; }
                        @foreach (var job in failedJobs)
                        {
                            <tr class="js-jobs-list-row @(!job.Value.InFailedState ? "obsolete-data" : null) @(job.Value.InFailedState ? "hover" : null)">
                                <td rowspan="@(job.Value.InFailedState ? "2" : "1")">
                                    @if (job.Value.InFailedState)
                                    {
                                        <input type="checkbox" class="js-jobs-list-checkbox" name="jobs[]" value="@job.Key" />
                                    }
                                </td>
                                <td class="min-width" rowspan="@(job.Value.InFailedState ? "2" : "1")">
                                    @Html.JobIdLink(job.Key)
                                    @if (!job.Value.InFailedState)
                                    {
                                        <span title="Job's state has been changed while fetching data." class="glyphicon glyphicon-question-sign"></span>
                                    }
                                </td>
                                <td class="min-width">
                                    @if (job.Value.FailedAt.HasValue)
                                    {
                                        @if (RelativeTime == true)
                                        {
                                            @Html.RelativeTime(job.Value.FailedAt.Value);
                                        }
                                        else
                                        {
                                            @Html.Raw(job.Value.FailedAt.Value.ToString("dd/MM/yyyy HH:mm"));
                                        }
                                    }
                                </td>
                                <td>
                                    <div>
                                        @Html.JobNameLink(job.Key, job.Value.Job)
                                    </div>
                                    @if (!String.IsNullOrEmpty(job.Value.ExceptionMessage))
                                    {
                                        <div style="color: #888;">
                                            @job.Value.Reason <a class="expander" href="#">@(index == 0 ? "Less details..." : "More details...")</a>
                                        </div>
                                    }
                                </td>
                            </tr>
                            if (job.Value.InFailedState)
                            {
                                <tr>
                                    <td colspan="2" class="failed-job-details">
                                        <div class="expandable" style="@(index++ == 0 ? "display: block;" : null)">
                                            <h4>@job.Value.ExceptionType</h4>
                                            <p>
                                                @job.Value.ExceptionMessage
                                            </p>

                                            @if (!String.IsNullOrEmpty(job.Value.ExceptionDetails))
                                            {
                                                <pre class="stack-trace"><code>@Html.StackTrace(job.Value.ExceptionDetails)</code></pre>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
                @Html.Paginator(pager)
            </div>
                            }
    </div>
</div>